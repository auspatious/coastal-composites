kind: Workflow

metadata:
  generateName: coastal-high-low-tide-composite-
  namespace: cenv-coastlines-argo

spec:
  entrypoint: workflow-entrypoint
  serviceAccountName: cenv-coastlines-team-sa-argo
  podGC:
    strategy: OnWorkflowSuccess
    deleteDelayDuration: 600s
  nodeSelector:
    digitalearthpacific.org/node-size: data_pipelines
  tolerations:
    - key: easi.csiro.au/dedicated
      operator: Equal
      effect: NoSchedule
      value: data_pipelines
  parallelism: 10
  arguments:
    parameters:
    - name: image-name
      value: "ghcr.io/auspatious/coastal-composites"  # The Docker image
    - name: image-tag
      value: "0.0.2"  # The Docker image and code version
    - name: version
      value: "0.0.1"  # The version of the data product being made
    - name: memory-limit-per-worker
      value: "80GB"   # Dask's memory limit per worker.
    - name: n-workers
      value: "80GB"   # Dask's memory limit per worker.
    - name: output-bucket
      value: easi-asia-dc-data-projects  # The bucket where the data will be stored
    - name: output-path-prefix
      value: coastlines  # The prefix of the path where the data will be stored
    - name: overwrite
      value: "--no-overwrite"  # Can be "--overwrite" or "--no-overwrite"
  templates:
  - name: workflow-entrypoint
    dag:
      tasks:
        - name: generate-ids
          template: generate
          arguments:
            parameters:
              - name: limit
                value: "10"
              - name: year
                value: "2022"  # One year "2022", or a period "2020-2021"
              - name: version
                value: "{{ workflow.parameters.version }}"
              - name: output-bucket
                value: "{{ workflow.parameters.output-bucket }}"
              - name: output-path-prefix
                value: "{{ workflow.parameters.output-path-prefix }}"
              - name: overwrite
                value: "{{ workflow.parameters.overwrite }}"

        - name: process-id
          depends: generate-ids.Succeeded
          template: process
          arguments:
            parameters:
            - name: tile-id
              value: "{{item.tile-id}}"
            - name: year
              value: "{{item.year}}"
            - name: version
              value: "{{ workflow.parameters.version }}"
            - name: memory-limit-per-worker
              value: "{{ workflow.parameters.memory-limit-per-worker }}"
            - name: n-workers
              value: "{{ workflow.parameters.n-workers }}"
            - name: output-bucket
              value: "{{ workflow.parameters.output-bucket }}"
            - name: output-path-prefix
              value: "{{ workflow.parameters.output-path-prefix }}"
            - name: overwrite
              value: "{{ workflow.parameters.overwrite }}"
          withParam: "{{ tasks.generate-ids.outputs.result }}"

  - name: generate
    inputs:
      parameters:
      - name: limit
      - name: year
      - name: version
      - name: output-bucket
      - name: output-path-prefix
      - name: overwrite
    container:
      image: "{{ workflow.parameters.image-name }}:{{ workflow.parameters.image-tag }}"
      imagePullPolicy: IfNotPresent
      resources:
        requests: 
          memory: 100Mi
          cpu: 1.0
      command: [ python ]
      args:
        - src/print_tasks.py
        - --year
        - "{{ inputs.parameters.year }}"
        - --version
        - "{{ inputs.parameters.version }}"
        - --limit
        - "{{ inputs.parameters.limit }}"
        - --output-bucket
        - "{{ inputs.parameters.output-bucket }}"
        - --output-path-prefix
        - "{{ inputs.parameters.output-path-prefix }}"
        - "{{ inputs.parameters.overwrite }}"

  - name: process
    inputs:
      parameters:
      - name: tile-id
      - name: year
      - name: version
      - name: memory-limit-per-worker
      - name: n-workers
      - name: output-bucket
      - name: output-path-prefix
      - name: overwrite
    container:
      image: "{{ workflow.parameters.image-name }}:{{ workflow.parameters.image-tag }}"
      imagePullPolicy: IfNotPresent
      resources:
        requests:
          memory: 60Gi
          cpu: 12
        limits:
          cpu: 15
          memory: 80Gi
      command: [ python ]
      args:
        - src/run_task.py
        - --tile-id
        - "{{ inputs.parameters.tile-id }}"
        - --year
        - "{{ inputs.parameters.year }}"
        - --version
        - "{{ inputs.parameters.version }}"
        - --output-bucket
        - "{{ inputs.parameters.output-bucket }}"
        - --output-path-prefix
        - "{{ inputs.parameters.output-path-prefix }}"
        - --memory-limit-per-worker
        - "{{ inputs.parameters.memory-limit-per-worker }}"
        - --n-workers
        - "{{ inputs.parameters.n-workers }}"
        - --threads-per-worker
        - "64"
        - "{{ inputs.parameters.overwrite }}"
